<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | this has yet to be defined]]></title>
  <link href="http://y2bd.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://y2bd.github.io/"/>
  <updated>2013-08-16T23:23:03-07:00</updated>
  <id>http://y2bd.github.io/</id>
  <author>
    <name><![CDATA[y2bd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing alignment issues with DataTemplateSelector]]></title>
    <link href="http://y2bd.github.io/blog/2013/08/16/fixing-alignment-issues-with-datatemplateselector/"/>
    <updated>2013-08-16T19:24:00-07:00</updated>
    <id>http://y2bd.github.io/blog/2013/08/16/fixing-alignment-issues-with-datatemplateselector</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently working on a journaling application for WP8. While designing the page for browsing through past entries, I found that I needed to be able to switch between data templates for the <code>LongListSelector</code> housed in the page. Some journal entries would have just text, some would have only a header photo, and some would have both, and I needed to display the entries differently for all three cases.</p>

<!-- more -->


<p>I found <a href="http://www.geekchamp.com/articles/implementing-windows-phone-7-datatemplateselector-and-customdatatemplateselector">this article</a> describing how to recreate WPF&rsquo;s <code>DataTemplateSelector</code> class for Windows Phone. It worked fine&mdash;after remaking the base abstract class and extending it for my specific case, all you need to do is specify the different data templates in your xaml:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;EntryListItemTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector.Both<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>DataTemplate<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>!-- content here --<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>/DataTemplate<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/sel:EntryItemTemplateSelector.Both<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector.OnlyImage<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>DataTemplate<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>!-- content here --<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>/DataTemplate<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/sel:EntryItemTemplateSelector.OnlyImage<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector.OnlyText<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>DataTemplate<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>!-- content here --<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>/DataTemplate<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/sel:EntryItemTemplateSelector.OnlyText<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>/sel:EntryItemTemplateSelector&gt;
</span><span class='line'><span class="nt">&lt;/DataTemplate&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A bit verbose, but it got the job done thankfully. The LongListSelector would now switch between templates as required.</p>

<p>There was a bit of a problem though.</p>

<p><img src="/images/posts/centered.png" title="&lsquo;All of the elements are centered and small!&rsquo;" ></p>

<p>Mordecai has the right idea.</p>

<p>All of the elements in the LongListSelector were no longer listening to the standard alignment and sizing rules, instead being only as wide as their content and staying put in the center.</p>

<p>I tried adjusting margins, hardcoding widths, <code>HorizontalAlignment=Stretch</code> <em>everything</em>, and either it wouldn&rsquo;t work, or it would make things even worse.</p>

<p>After a lot of vague googling (what exactly would you call this problem? I honestly had no idea), I arrove at the correct solution. My <code>EntryItemTemplateSelector</code>, inheriting from <code>ContentControl</code>, has a new property named <code>HorizontalContentAlignment</code>, which <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.control.horizontalcontentalignment.aspx">sets the alignment of the control&rsquo;s <em>content</em> rather than the control itself</a>. So all you have to do then is</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector HorizontalContentAlignment=<span class="ni">&amp;ldquo;</span>Stretch<span class="ni">&amp;rdquo;</span>&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which gets you</p>

<p><img src="/images/posts/aligned.png" title="&lsquo;Now every element is taking up the correct amount of space!&rsquo;" ></p>

<p>Nothing satisfies Mordecai though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Code Highlighting]]></title>
    <link href="http://y2bd.github.io/blog/2013/08/14/testing-code-highlighting/"/>
    <updated>2013-08-14T19:19:00-07:00</updated>
    <id>http://y2bd.github.io/blog/2013/08/14/testing-code-highlighting</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s see how syntax-highlighting works with this.</p>

<!-- more -->


<p>Here is some Lua code for a Love2D-based game:</p>

<p>``` lua
&mdash; mapper.lua
&mdash; loads the maps and draws them to the screen</p>

<p>&mdash; requires
local tileLoader = require(&ldquo;libs.advtileloader.Loader&rdquo;)</p>

<p>&mdash; constants
local TOTAL_LEVELS = 1</p>

<p>&mdash; local vars
local function buildMapName(index)
  return &ldquo;level_&rdquo; .. index .. &ldquo;.tmx&rdquo;
end</p>

<p>&mdash; module
local Mapper =
{
  currentLevelIndex = 1,
  maps = {}
}</p>

<p>function Mapper.draw()
  love.graphics.setColor(255,255,255) &mdash; apparently we need to do this to prevent tint
  Mapper.maps[Mapper.currentLevelIndex]:draw()
end</p>

<p>function Mapper.getCurrentMap()
  return maps[currentLevelIndex]
end</p>

<p>&mdash; init and return
local function init()
  tileLoader.path = &ldquo;maps/&rdquo;</p>

<p>  for i=1, TOTAL_LEVELS do</p>

<pre><code>local map = tileLoader.load(buildMapName(i))

map:setDrawRange(0,0,love.graphics.getWidth(), love.graphics.getHeight())
map.drawObjects = false

Mapper.maps[i] = map
</code></pre>

<p>  end</p>

<p>  return Mapper
end</p>

<p>return init()
```</p>

<p>And that&rsquo;s it.</p>
]]></content>
  </entry>
  
</feed>
