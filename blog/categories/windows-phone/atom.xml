<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: windows phone | this has yet to be defined]]></title>
  <link href="http://y2bd.github.io/blog/categories/windows-phone/atom.xml" rel="self"/>
  <link href="http://y2bd.github.io/"/>
  <updated>2013-08-27T22:04:00-07:00</updated>
  <id>http://y2bd.github.io/</id>
  <author>
    <name><![CDATA[y2bd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My multiline Textbox configuration]]></title>
    <link href="http://y2bd.github.io/blog/2013/08/27/my-multiline-textbox-configuration/"/>
    <updated>2013-08-27T20:04:00-07:00</updated>
    <id>http://y2bd.github.io/blog/2013/08/27/my-multiline-textbox-configuration</id>
    <content type="html"><![CDATA[<p>I&rsquo;m still working on Quill, but I figured this construct was useful enough for me to save in its
purest form, before I uglify it with orientation hacks.</p>

<p>This is an implementation of a properly-behaving multiline TextBox for Windows Phone. The original implementation
was sourced from <a href="http://klingdigital.net/2013/06/scrollviewer-and-multiline-textbox-windowsphone">KlingDigital</a>.
I just made extremely minor modifications, mostly refactoring to make it easier to modify (adding an input scope,
supporting landscape, etc).</p>

<p>Here is the XAML:</p>

<p>``` xml
&lt;phone:PhoneApplicationPage</p>

<pre><code>x:Class="Autocomplete.MainPage"
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:phone="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone"
xmlns:shell="clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone"
xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
mc:Ignorable="d"
FontFamily="{StaticResource PhoneFontFamilyNormal}"
FontSize="{StaticResource PhoneFontSizeNormal}"
Foreground="{StaticResource PhoneForegroundBrush}"
SupportedOrientations="Portrait" Orientation="Portrait"
shell:SystemTray.IsVisible="True"
Loaded="PhoneApplicationPage_Loaded"&gt;

&lt;!--LayoutRoot is the root grid where all page content is placed--&gt;
&lt;Grid x:Name="LayoutRoot" Background="Transparent"&gt;
    &lt;Grid.RowDefinitions&gt;
        &lt;RowDefinition/&gt;
        &lt;RowDefinition Height="Auto" /&gt;
    &lt;/Grid.RowDefinitions&gt;

    &lt;ScrollViewer x:Name="Scroller"
                  Background="#1ba1e2"
                  Grid.Row="0"&gt;
        &lt;StackPanel VerticalAlignment="Top"&gt;
            &lt;TextBox x:Name="ScrollerInput"
                     TextWrapping="Wrap"
                     AcceptsReturn="True" 
                     TextChanged="ScrollerInput_TextChanged"
                     GotFocus="ScrollerInput_GotFocus"
                     LostFocus="ScrollerInput_LostFocus"
                     Tap="ScrollerInput_Tap"/&gt;
        &lt;/StackPanel&gt;
    &lt;/ScrollViewer&gt;

    &lt;Grid x:Name="KeyboardPlaceholder"
          Grid.Row="1"
          Visibility="Collapsed" /&gt;
&lt;/Grid&gt;    
</code></pre>

<p>&lt;/phone:PhoneApplicationPage>
```</p>

<p>and here is the codebehind:</p>

<p>``` csharp
using Microsoft.Phone.Controls;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;</p>

<p>namespace Autocomplete
{
  public partial class MainPage : PhoneApplicationPage
  {</p>

<pre><code>private const int PortraitHeight = 336;

private double _inputHeight = 0;
private double _tapHeight = 0;

// Constructor
public MainPage()
{
  InitializeComponent();
}

private void SizePlaceholder()
{
  KeyboardPlaceholder.Height = PortraitHeight;
}

private void ForceLayout()
{
  App.RootFrame.RenderTransform = new CompositeTransform();

  LayoutRoot.UpdateLayout();
}

private void PhoneApplicationPage_Loaded(object sender, RoutedEventArgs e)
{

}

private void ScrollerInput_TextChanged(object sender, TextChangedEventArgs e)
{
  // updates seem to be late if we don't invoke them with the dispatcher
  Dispatcher.BeginInvoke(() =&gt;
  {
    double currentInputHeight = ScrollerInput.ActualHeight;

    if (currentInputHeight &gt; _inputHeight)
    {
      // scroll up by the difference between the current box size and the old box size
      Scroller.ScrollToVerticalOffset(Scroller.VerticalOffset + currentInputHeight - _inputHeight);
    }

    _inputHeight = currentInputHeight;
  });
}

private void ScrollerInput_GotFocus(object sender, RoutedEventArgs e)
{
  KeyboardPlaceholder.Visibility = Visibility.Visible;
  SizePlaceholder();

  ForceLayout();

  Scroller.ScrollToVerticalOffset(_tapHeight);
}

private void ScrollerInput_LostFocus(object sender, RoutedEventArgs e)
{
  KeyboardPlaceholder.Visibility = Visibility.Collapsed;
}

private void ScrollerInput_Tap(object sender, System.Windows.Input.GestureEventArgs e)
{
  _tapHeight = e.GetPosition(ScrollerInput).Y - 120;
}
</code></pre>

<p>  }
}
```</p>

<p>Hopefully this template will prove useful in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing alignment issues with DataTemplateSelector]]></title>
    <link href="http://y2bd.github.io/blog/2013/08/16/fixing-alignment-issues-with-datatemplateselector/"/>
    <updated>2013-08-16T19:24:00-07:00</updated>
    <id>http://y2bd.github.io/blog/2013/08/16/fixing-alignment-issues-with-datatemplateselector</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently working on a journaling application for WP8. While designing the page for browsing through past entries, I found that I needed to be able to switch between data templates for the <code>LongListSelector</code> housed in the page. Some journal entries would have just text, some would have only a header photo, and some would have both, and I needed to display the entries differently for all three cases.</p>

<p>I found <a href="http://www.geekchamp.com/articles/implementing-windows-phone-7-datatemplateselector-and-customdatatemplateselector">this article</a> describing how to recreate WPF&rsquo;s <code>DataTemplateSelector</code> class for Windows Phone. It worked fine&mdash;after remaking the base abstract class and extending it for my specific case, all you need to do is specify the different data templates in your xaml:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;EntryListItemTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector.Both<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>DataTemplate<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>!-- content here --<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>/DataTemplate<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/sel:EntryItemTemplateSelector.Both<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector.OnlyImage<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>DataTemplate<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>!-- content here --<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>/DataTemplate<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/sel:EntryItemTemplateSelector.OnlyImage<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector.OnlyText<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>DataTemplate<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>!-- content here --<span class="ni">&amp;gt;</span> <span class="ni">&amp;lt;</span>/DataTemplate<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/sel:EntryItemTemplateSelector.OnlyText<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>/sel:EntryItemTemplateSelector&gt;
</span><span class='line'><span class="nt">&lt;/DataTemplate&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A bit verbose, but it got the job done thankfully. The LongListSelector would now switch between templates as required.</p>

<p>There was a bit of a problem though.</p>

<p><img src="/images/posts/centered.png" title="&lsquo;All of the elements are centered and small!&rsquo;" ></p>

<p>Mordecai has the right idea.</p>

<p>All of the elements in the LongListSelector were no longer listening to the standard alignment and sizing rules, instead being only as wide as their content and staying put in the center.</p>

<p>I tried adjusting margins, hardcoding widths, <code>HorizontalAlignment=Stretch</code> <em>everything</em>, and either it wouldn&rsquo;t work, or it would make things even worse.</p>

<p>After a lot of vague googling (what exactly would you call this problem? I honestly had no idea), I arrove at the correct solution. My <code>EntryItemTemplateSelector</code>, inheriting from <code>ContentControl</code>, has a new property named <code>HorizontalContentAlignment</code>, which <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.control.horizontalcontentalignment.aspx">sets the alignment of the control&rsquo;s <em>content</em> rather than the control itself</a>. So all you have to do then is</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>sel:EntryItemTemplateSelector HorizontalContentAlignment=<span class="ni">&amp;ldquo;</span>Stretch<span class="ni">&amp;rdquo;</span>&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which gets you</p>

<p><img src="/images/posts/aligned.png" title="&lsquo;Now every element is taking up the correct amount of space!&rsquo;" ></p>

<p>Nothing satisfies Mordecai though.</p>
]]></content>
  </entry>
  
</feed>
